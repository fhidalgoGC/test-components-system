import { createContext, useContext, useState } from 'react';
import type { {{ComponentName}}Context } from '../types';
import { useI18nMerge } from '../hooks';
import { ConfigContext } from '../../../../providers/AppEnviromentProvider/index.hook';
import { environment } from '../../../../enviorments/enviroment';

const {{ComponentName}}Ctx = createContext<{{ComponentName}}Context | undefined>(undefined);

// Hook to safely access ConfigProvider (optional)
function useOptionalConfig() {
  const configContext = useContext(ConfigContext);
  return configContext?.config || null;
}

export const use{{ComponentName}}Context = () => {
  const context = useContext({{ComponentName}}Ctx);
  if (!context) {
    throw new Error('use{{ComponentName}}Context must be used within {{ComponentName}}Provider');
  }
  return context;
};

export const {{ComponentName}}Provider = ({ 
  children,
  langOverride,
  i18nOrder = 'local-first'
}: { 
  children: React.ReactNode;
  langOverride?: string;
  i18nOrder?: 'global-first' | 'local-first';
}) => {
  const [state, setState] = useState({});
  const { lang, t } = useI18nMerge(langOverride, { order: i18nOrder });
  
  // Access ConfigProvider if available
  const optionalConfig = useOptionalConfig();
  
  // Example: Apply cascade priority for a config value
  // Uncomment and customize as needed:
  /*
  const finalConfigValue =
    props.configProp ??                                          // 1️⃣ Props (highest priority)
    optionalConfig?.{{COMPONENT_NAME_UPPER}}_CONFIG?.SOME_VALUE ??  // 2️⃣ ConfigProvider
    environment.{{COMPONENT_NAME_UPPER}}_CONFIG.SOME_VALUE;         // 3️⃣ Default (fallback)
  */

  const value: {{ComponentName}}Context = {
    t,
    lang,
  };

  return (
    <{{ComponentName}}Ctx.Provider value={value}>
      {children}
    </{{ComponentName}}Ctx.Provider>
  );
};

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import i18n from '@/common/utils/i18n';
import { useTranslation } from 'react-i18next';

// Tipos compatibles con la librerÃ­a GC-UI-COMPONENTS
type Language = 'es' | 'en';

interface AppLanguageContextType {
  lang: Language;
  setLanguage: (lang: Language) => void;
  setLang: (lang: Language) => void; // Alias para compatibilidad con GC-UI-COMPONENTS
}

const AppLanguageContext = createContext<AppLanguageContextType | undefined>(undefined);

interface AppLanguageProviderProps {
  children: ReactNode;
  initial?: Language;
}

export function AppLanguageProvider({ children, initial = 'es' }: AppLanguageProviderProps) {
  const { i18n: i18nInstance } = useTranslation();
  const [language, setLanguageState] = useState<Language>(() => {
    // Usar el idioma actual de i18n existente
    const currentLang = i18nInstance.language as Language;
    return ['es', 'en'].includes(currentLang) ? currentLang : initial;
  });

  const setLanguage = (newLang: Language) => {
    setLanguageState(newLang);
    // Cambiar el idioma en i18n existente
    i18nInstance.changeLanguage(newLang);
    // Persistir en localStorage
    localStorage.setItem('language', newLang);
    // Actualizar el documento HTML
    document.documentElement.lang = newLang;
  };

  // Sincronizar con cambios externos de i18n
  useEffect(() => {
    const handleLanguageChanged = (lng: string) => {
      const validLang = ['es', 'en'].includes(lng) ? lng as Language : 'es';
      if (validLang !== language) {
        setLanguageState(validLang);
      }
    };

    i18nInstance.on('languageChanged', handleLanguageChanged);
    
    return () => {
      i18nInstance.off('languageChanged', handleLanguageChanged);
    };
  }, [i18nInstance, language]);

  const value: AppLanguageContextType = {
    lang: language,
    setLanguage,
    setLang: setLanguage // Alias para compatibilidad con GC-UI-COMPONENTS
  };

  return (
    <AppLanguageContext.Provider value={value}>
      {children}
    </AppLanguageContext.Provider>
  );
}

export function useAppLanguage(): AppLanguageContextType {
  const context = useContext(AppLanguageContext);
  if (!context) {
    throw new Error('useAppLanguage must be used within AppLanguageProvider');
  }
  return context;
}

export type { Language, AppLanguageContextType };